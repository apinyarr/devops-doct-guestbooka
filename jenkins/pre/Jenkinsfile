def Branch = "develop"
def node = ["PRE":"pre-app", "PRD":"prd-app1", "PRD1":"prd-app1", "PRD2":"prd-app2"]
def MONGODB_IP = "192.168.10.12"
def selenium_url = "https://y57fsw1ar6.execute-api.us-east-1.amazonaws.com/startwebdriver?release="

pipeline {
    agent {
        label "master"
    }

    parameters {
        choice(name: 'Environment', choices: ['PRE','PRD','PRD1','PRD2'], description: 'Select Environment.')
        string(name: 'Branch', description: 'Branch name or Tag. Default branch is develop.')
    }

    options {
        // skipDefaultCheckout()
        timeout(time: 5, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Preparation') {
            steps {
                script {
                    echo "********************* Stage: Preparation *********************"
                    echo "--------------------- Step: Reading Environment ---------------------"
                    echo "Environment: ${params.Environment}"
                    echo "--------------------- Step: Reading Branch ---------------------"
                    if(params.Branch == '') {
                        echo "No specific branch provided!!!"
                        exit 1
                    }
                    echo "Branch/Tag: ${params.Branch}"
                    if (params.Environment != "PRE") {
                        MONGODB_IP = "192.168.30.11"
                    }
                }
            }
        }

        stage('Deployment') {
            when {
                anyOf {
                    expression { return params.Environment == "PRE" }
                    expression { return params.Environment == "PRD" }
                    expression { return params.Environment == "PRD2" }
                }
            }

            agent {
                label node["${params.Environment}"]
            }

            options {
                skipDefaultCheckout()
            }

            steps {
                script {
                    echo "********************* Stage: ${params.Environment} Deployment *********************"
                    echo "--------------------- Step: Remove Backup Container ---------------------"
                    sh "docker rm -f guestbooka-backup"
                    echo "==NOTE=="
                    echo "If docker rm shown an error, it is ok because there is no a backup container."

                    echo "--------------------- Step: Pull Guestbook Base Image ---------------------"
                    sh "docker pull apinyarr/guestbooka:${params.Branch}"

                    echo "--------------------- Step: Run Guestbooka Container with Tag ${params.Branch} ---------------------"
                    try {
                        sh "docker stop guestbooka"
                        sh "docker rename guestbooka guestbooka-backup"
                    } catch (Exception e) {
                        echo "Exception occurred: " + e.toString()
                    }
                    sh "docker run -d --name guestbooka -e MONGODB_ADDON_URI=mongodb://${MONGODB_IP}:27017/admin -p 8080:8080 apinyarr/guestbooka:${params.Branch}"
                    currentBuild.description = "Branch: ${params.Branch}"
                }
            }
        }

        stage('Selenium Web Driver') {
            when {
                expression { return params.Environment == "PRE" }
            }

            options {
                skipDefaultCheckout()
            }

            steps {
                script {
                    echo "********************* Stage: Selenium Web Driver *********************"
                    echo "--------------------- Step: Triggering Selenium Lambda function  ---------------------"
                    sh "curl -v ${selenium_url}${params.Branch}"
                    echo "--------------------- Step: Selenium result screenshot  ---------------------"
                    echo "https://andyawson-ui-test.s3.amazonaws.com/screenshots/home_${params.Branch}.png"
                }
            }
        }

        stage('Clean Up') {
            when {
                anyOf {
                    expression { return params.Environment == "PRE" }
                    expression { return params.Environment == "PRD" }
                    expression { return params.Environment == "PRD2" }
                }
            }

            agent {
                label node["${params.Environment}"]
            }

            options {
                skipDefaultCheckout()
            }

            steps {
                script {
                    echo "********************* Stage: Clean Up *********************"
                    echo "--------------------- Step: Clean Up Work Space ---------------------"
                    cleanWs()
                }
            }
        }

        stage('Post Deployment') {
            when {
                anyOf {
                    expression { return params.Environment == "PRD" }
                    expression { return params.Environment == "PRD2" }
                }
            }

            agent {
                label node["${params.Environment}"]
            }

            options {
                skipDefaultCheckout()
            }
            steps {
                script {
                    echo "********************* Stage: Post Deployment *********************"
                    echo "--------------------- Step: continue deploying the next server (if any)  ---------------------"
                    if(params.Environment == "PRD") {
                        build job: 'guestbooka-deployment', parameters: [string(name: 'Environment', value: "PRD2"),string(name: 'Branch', value: "${params.Branch}")]
                    }
                    else {
                        echo "==Note=="
                        echo "No more servers to deploy"
                    }
                }
            }
        }
    }
}